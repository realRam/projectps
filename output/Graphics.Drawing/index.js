// Generated by purs version 0.11.6
"use strict";
var Color = require("../Color");
var Control_Alt = require("../Control.Alt");
var Control_Applicative = require("../Control.Applicative");
var Control_Bind = require("../Control.Bind");
var Control_Monad_Eff = require("../Control.Monad.Eff");
var Control_Semigroupoid = require("../Control.Semigroupoid");
var Data_Eq = require("../Data.Eq");
var Data_Foldable = require("../Data.Foldable");
var Data_Function = require("../Data.Function");
var Data_Functor = require("../Data.Functor");
var Data_HeytingAlgebra = require("../Data.HeytingAlgebra");
var Data_List = require("../Data.List");
var Data_List_Types = require("../Data.List.Types");
var Data_Maybe = require("../Data.Maybe");
var Data_Monoid = require("../Data.Monoid");
var Data_Semigroup = require("../Data.Semigroup");
var Data_Semiring = require("../Data.Semiring");
var Data_Unit = require("../Data.Unit");
var Graphics_Canvas = require("../Graphics.Canvas");
var Graphics_Drawing_Font = require("../Graphics.Drawing.Font");
var $$Math = require("../Math");
var Prelude = require("../Prelude");
var Shadow = function (x) {
    return x;
};
var Path = (function () {
    function Path(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    Path.create = function (value0) {
        return function (value1) {
            return new Path(value0, value1);
        };
    };
    return Path;
})();
var Rectangle = (function () {
    function Rectangle(value0) {
        this.value0 = value0;
    };
    Rectangle.create = function (value0) {
        return new Rectangle(value0);
    };
    return Rectangle;
})();
var Arc = (function () {
    function Arc(value0) {
        this.value0 = value0;
    };
    Arc.create = function (value0) {
        return new Arc(value0);
    };
    return Arc;
})();
var Composite = (function () {
    function Composite(value0) {
        this.value0 = value0;
    };
    Composite.create = function (value0) {
        return new Composite(value0);
    };
    return Composite;
})();
var OutlineStyle = function (x) {
    return x;
};
var FillStyle = function (x) {
    return x;
};
var Fill = (function () {
    function Fill(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    Fill.create = function (value0) {
        return function (value1) {
            return new Fill(value0, value1);
        };
    };
    return Fill;
})();
var Outline = (function () {
    function Outline(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    Outline.create = function (value0) {
        return function (value1) {
            return new Outline(value0, value1);
        };
    };
    return Outline;
})();
var Text = (function () {
    function Text(value0, value1, value2, value3, value4) {
        this.value0 = value0;
        this.value1 = value1;
        this.value2 = value2;
        this.value3 = value3;
        this.value4 = value4;
    };
    Text.create = function (value0) {
        return function (value1) {
            return function (value2) {
                return function (value3) {
                    return function (value4) {
                        return new Text(value0, value1, value2, value3, value4);
                    };
                };
            };
        };
    };
    return Text;
})();
var Many = (function () {
    function Many(value0) {
        this.value0 = value0;
    };
    Many.create = function (value0) {
        return new Many(value0);
    };
    return Many;
})();
var Scale = (function () {
    function Scale(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    Scale.create = function (value0) {
        return function (value1) {
            return new Scale(value0, value1);
        };
    };
    return Scale;
})();
var Translate = (function () {
    function Translate(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    Translate.create = function (value0) {
        return function (value1) {
            return new Translate(value0, value1);
        };
    };
    return Translate;
})();
var Rotate = (function () {
    function Rotate(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    Rotate.create = function (value0) {
        return function (value1) {
            return new Rotate(value0, value1);
        };
    };
    return Rotate;
})();
var Clipped = (function () {
    function Clipped(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    Clipped.create = function (value0) {
        return function (value1) {
            return new Clipped(value0, value1);
        };
    };
    return Clipped;
})();
var WithShadow = (function () {
    function WithShadow(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    WithShadow.create = function (value0) {
        return function (value1) {
            return new WithShadow(value0, value1);
        };
    };
    return WithShadow;
})();
var translate = function (tx) {
    return function (ty) {
        return Translate.create({
            translateX: tx, 
            translateY: ty
        });
    };
};
var text = Text.create;
var shadowOffset = function (x) {
    return function (y) {
        return {
            color: Data_Maybe.Nothing.value, 
            blur: Data_Maybe.Nothing.value, 
            offset: new Data_Maybe.Just({
                x: x, 
                y: y
            })
        };
    };
};
var shadowColor = function (c) {
    return {
        color: new Data_Maybe.Just(c), 
        blur: Data_Maybe.Nothing.value, 
        offset: Data_Maybe.Nothing.value
    };
};
var shadowBlur = function (b) {
    return {
        color: Data_Maybe.Nothing.value, 
        blur: new Data_Maybe.Just(b), 
        offset: Data_Maybe.Nothing.value
    };
};
var shadow = WithShadow.create;
var semigroupShape = new Data_Semigroup.Semigroup(function (v) {
    return function (v1) {
        if (v instanceof Composite) {
            return new Composite(Data_Semigroup.append(Data_List_Types.semigroupList)(v.value0)(Data_List.singleton(v1)));
        };
        if (v1 instanceof Composite) {
            return new Composite(new Data_List_Types.Cons(v, v1.value0));
        };
        return new Composite(new Data_List_Types.Cons(v, new Data_List_Types.Cons(v1, Data_List_Types.Nil.value)));
    };
});
var semigroupShadow = new Data_Semigroup.Semigroup(function (v) {
    return function (v1) {
        return {
            color: Control_Alt.alt(Data_Maybe.altMaybe)(v.color)(v1.color), 
            blur: Control_Alt.alt(Data_Maybe.altMaybe)(v.blur)(v1.blur), 
            offset: Control_Alt.alt(Data_Maybe.altMaybe)(v.offset)(v1.offset)
        };
    };
});
var semigroupOutlineStyle = new Data_Semigroup.Semigroup(function (v) {
    return function (v1) {
        return {
            color: Control_Alt.alt(Data_Maybe.altMaybe)(v.color)(v1.color), 
            lineWidth: Control_Alt.alt(Data_Maybe.altMaybe)(v.lineWidth)(v1.lineWidth)
        };
    };
});
var semigroupFillStyle = new Data_Semigroup.Semigroup(function (v) {
    return function (v1) {
        return {
            color: Control_Alt.alt(Data_Maybe.altMaybe)(v.color)(v1.color)
        };
    };
});
var semigroupDrawing = new Data_Semigroup.Semigroup(function (v) {
    return function (v1) {
        if (v instanceof Many) {
            return new Many(Data_Semigroup.append(Data_List_Types.semigroupList)(v.value0)(Data_List.singleton(v1)));
        };
        if (v1 instanceof Many) {
            return new Many(new Data_List_Types.Cons(v, v1.value0));
        };
        return new Many(new Data_List_Types.Cons(v, new Data_List_Types.Cons(v1, Data_List_Types.Nil.value)));
    };
});
var scale = function (sx) {
    return function (sy) {
        return Scale.create({
            scaleX: sx, 
            scaleY: sy
        });
    };
};
var rotate = Rotate.create;
var render = function (ctx) {
    var renderShape = function (v) {
        if (v instanceof Path && v.value1 instanceof Data_List_Types.Nil) {
            return Control_Applicative.pure(Control_Monad_Eff.applicativeEff)(Data_Unit.unit);
        };
        if (v instanceof Path && v.value1 instanceof Data_List_Types.Cons) {
            return function __do() {
                var v1 = Graphics_Canvas.moveTo(ctx)(v.value1.value0.x)(v.value1.value0.y)();
                Data_Foldable.for_(Control_Monad_Eff.applicativeEff)(Data_List_Types.foldableList)(v.value1.value1)(function (pt) {
                    return Graphics_Canvas.lineTo(ctx)(pt.x)(pt.y);
                })();
                return Control_Applicative.when(Control_Monad_Eff.applicativeEff)(v.value0)(Data_Functor["void"](Control_Monad_Eff.functorEff)(Graphics_Canvas.closePath(ctx)))();
            };
        };
        if (v instanceof Rectangle) {
            return Data_Functor["void"](Control_Monad_Eff.functorEff)(Graphics_Canvas.rect(ctx)(v.value0));
        };
        if (v instanceof Arc) {
            return Data_Functor["void"](Control_Monad_Eff.functorEff)(Graphics_Canvas.arc(ctx)(v.value0));
        };
        if (v instanceof Composite) {
            return Data_Foldable.for_(Control_Monad_Eff.applicativeEff)(Data_List_Types.foldableList)(v.value0)(renderShape);
        };
        throw new Error("Failed pattern match at Graphics.Drawing line 289, column 3 - line 289, column 67: " + [ v.constructor.name ]);
    };
    var applyShadow = function (v) {
        return function __do() {
            Data_Foldable.for_(Control_Monad_Eff.applicativeEff)(Data_Foldable.foldableMaybe)(v.color)(function (color) {
                return Graphics_Canvas.setShadowColor(Color.cssStringHSLA(color))(ctx);
            })();
            Data_Foldable.for_(Control_Monad_Eff.applicativeEff)(Data_Foldable.foldableMaybe)(v.blur)(function (blur) {
                return Graphics_Canvas.setShadowBlur(blur)(ctx);
            })();
            return Data_Foldable.for_(Control_Monad_Eff.applicativeEff)(Data_Foldable.foldableMaybe)(v.offset)(function (offset) {
                return function __do() {
                    var v1 = Graphics_Canvas.setShadowOffsetX(offset.x)(ctx)();
                    return Graphics_Canvas.setShadowOffsetY(offset.y)(ctx)();
                };
            })();
        };
    };
    var applyOutlineStyle = function (v) {
        return function __do() {
            Data_Foldable.for_(Control_Monad_Eff.applicativeEff)(Data_Foldable.foldableMaybe)(v.color)(function (color) {
                return Graphics_Canvas.setStrokeStyle(Color.cssStringHSLA(color))(ctx);
            })();
            return Data_Foldable.for_(Control_Monad_Eff.applicativeEff)(Data_Foldable.foldableMaybe)(v.lineWidth)(function (width) {
                return Graphics_Canvas.setLineWidth(width)(ctx);
            })();
        };
    };
    var applyFillStyle = function (v) {
        return Data_Foldable.for_(Control_Monad_Eff.applicativeEff)(Data_Foldable.foldableMaybe)(v.color)(function (color) {
            return Graphics_Canvas.setFillStyle(Color.cssStringHSLA(color))(ctx);
        });
    };
    var go = function (v) {
        if (v instanceof Fill) {
            return Data_Functor["void"](Control_Monad_Eff.functorEff)(Graphics_Canvas.withContext(ctx)(function __do() {
                applyFillStyle(v.value1)();
                return Graphics_Canvas.fillPath(ctx)(renderShape(v.value0))();
            }));
        };
        if (v instanceof Outline) {
            return Data_Functor["void"](Control_Monad_Eff.functorEff)(Graphics_Canvas.withContext(ctx)(function __do() {
                applyOutlineStyle(v.value1)();
                return Graphics_Canvas.strokePath(ctx)(renderShape(v.value0))();
            }));
        };
        if (v instanceof Many) {
            return Data_Foldable.for_(Control_Monad_Eff.applicativeEff)(Data_List_Types.foldableList)(v.value0)(go);
        };
        if (v instanceof Scale) {
            return Data_Functor["void"](Control_Monad_Eff.functorEff)(Graphics_Canvas.withContext(ctx)(function __do() {
                var v1 = Graphics_Canvas.scale(v.value0)(ctx)();
                return go(v.value1)();
            }));
        };
        if (v instanceof Translate) {
            return Data_Functor["void"](Control_Monad_Eff.functorEff)(Graphics_Canvas.withContext(ctx)(function __do() {
                var v1 = Graphics_Canvas.translate(v.value0)(ctx)();
                return go(v.value1)();
            }));
        };
        if (v instanceof Rotate) {
            return Data_Functor["void"](Control_Monad_Eff.functorEff)(Graphics_Canvas.withContext(ctx)(function __do() {
                var v1 = Graphics_Canvas.rotate(v.value0)(ctx)();
                return go(v.value1)();
            }));
        };
        if (v instanceof Clipped) {
            return Data_Functor["void"](Control_Monad_Eff.functorEff)(Graphics_Canvas.withContext(ctx)(function __do() {
                renderShape(v.value0)();
                var v1 = Graphics_Canvas.clip(ctx)();
                return go(v.value1)();
            }));
        };
        if (v instanceof WithShadow) {
            return Data_Functor["void"](Control_Monad_Eff.functorEff)(Graphics_Canvas.withContext(ctx)(function __do() {
                applyShadow(v.value0)();
                return go(v.value1)();
            }));
        };
        if (v instanceof Text) {
            return Data_Functor["void"](Control_Monad_Eff.functorEff)(Graphics_Canvas.withContext(ctx)(function __do() {
                var v1 = Graphics_Canvas.setFont(Graphics_Drawing_Font.fontString(v.value0))(ctx)();
                applyFillStyle(v.value3)();
                return Graphics_Canvas.fillText(ctx)(v.value4)(v.value1)(v.value2)();
            }));
        };
        throw new Error("Failed pattern match at Graphics.Drawing line 242, column 3 - line 245, column 21: " + [ v.constructor.name ]);
    };
    return go;
};
var rectangle = function (x) {
    return function (y) {
        return function (w) {
            return function (h) {
                return new Rectangle({
                    x: x, 
                    y: y, 
                    w: w, 
                    h: h
                });
            };
        };
    };
};
var path = function (dictFoldable) {
    return function ($203) {
        return Path.create(false)(Data_List.fromFoldable(dictFoldable)($203));
    };
};
var outlined = Data_Function.flip(Outline.create);
var outlineColor = function (c) {
    return {
        color: new Data_Maybe.Just(c), 
        lineWidth: Data_Maybe.Nothing.value
    };
};
var monoidShape = new Data_Monoid.Monoid(function () {
    return semigroupShape;
}, new Composite(Data_Monoid.mempty(Data_List_Types.monoidList)));
var monoidShadow = new Data_Monoid.Monoid(function () {
    return semigroupShadow;
}, {
    color: Data_Maybe.Nothing.value, 
    blur: Data_Maybe.Nothing.value, 
    offset: Data_Maybe.Nothing.value
});
var monoidOutlineStyle = new Data_Monoid.Monoid(function () {
    return semigroupOutlineStyle;
}, {
    color: Data_Maybe.Nothing.value, 
    lineWidth: Data_Maybe.Nothing.value
});
var monoidFillStyle = new Data_Monoid.Monoid(function () {
    return semigroupFillStyle;
}, {
    color: Data_Maybe.Nothing.value
});
var monoidDrawing = new Data_Monoid.Monoid(function () {
    return semigroupDrawing;
}, new Many(Data_Monoid.mempty(Data_List_Types.monoidList)));
var lineWidth = function (c) {
    return {
        color: Data_Maybe.Nothing.value, 
        lineWidth: new Data_Maybe.Just(c)
    };
};
var filled = Data_Function.flip(Fill.create);
var fillColor = function (c) {
    return {
        color: new Data_Maybe.Just(c)
    };
};
var everywhere = function (f) {
    var go = function (v) {
        if (v instanceof Many) {
            return f(new Many(Data_Functor.map(Data_List_Types.functorList)(go)(v.value0)));
        };
        if (v instanceof Scale) {
            return f(new Scale(v.value0, go(v.value1)));
        };
        if (v instanceof Translate) {
            return f(new Translate(v.value0, go(v.value1)));
        };
        if (v instanceof Rotate) {
            return f(new Rotate(v.value0, go(v.value1)));
        };
        if (v instanceof Clipped) {
            return f(new Clipped(v.value0, go(v.value1)));
        };
        if (v instanceof WithShadow) {
            return f(new WithShadow(v.value0, go(v.value1)));
        };
        return f(v);
    };
    return go;
};
var eqShape = new Data_Eq.Eq(function (v) {
    return function (v1) {
        if (v instanceof Path && v1 instanceof Path) {
            return v.value0 === v1.value0 && (Data_Eq.eq(Data_List_Types.eqList(Data_Eq.eqNumber))(Data_Functor.map(Data_List_Types.functorList)(function (v2) {
                return v2.x;
            })(v.value1))(Data_Functor.map(Data_List_Types.functorList)(function (v2) {
                return v2.x;
            })(v1.value1)) && Data_Eq.eq(Data_List_Types.eqList(Data_Eq.eqNumber))(Data_Functor.map(Data_List_Types.functorList)(function (v2) {
                return v2.y;
            })(v.value1))(Data_Functor.map(Data_List_Types.functorList)(function (v2) {
                return v2.y;
            })(v1.value1)));
        };
        if (v instanceof Rectangle && v1 instanceof Rectangle) {
            return v.value0.x === v1.value0.x && (v.value0.y === v1.value0.y && (v.value0.w === v1.value0.w && v.value0.h === v1.value0.h));
        };
        if (v instanceof Arc && v1 instanceof Arc) {
            return v.value0.x === v1.value0.x && (v.value0.y === v1.value0.y && (v.value0.start === v1.value0.start && (v.value0.end === v1.value0.end && v.value0.r === v1.value0.r)));
        };
        if (v instanceof Composite && v1 instanceof Composite) {
            return Data_Eq.eq(Data_List_Types.eqList(eqShape))(v.value0)(v1.value0);
        };
        return false;
    };
});
var eqShadow = new Data_Eq.Eq(function (v) {
    return function (v1) {
        return Data_Eq.eq(Data_Maybe.eqMaybe(Color.eqColor))(v.color)(v1.color) && (Data_Eq.eq(Data_Maybe.eqMaybe(Data_Eq.eqNumber))(v.blur)(v1.blur) && Data_Maybe.maybe(Data_Maybe.isNothing(v1.offset))(function (o) {
            return Data_Maybe.maybe(false)(function (o$prime) {
                return o.x === o$prime.x && o.y === o$prime.y;
            })(v1.offset);
        })(v.offset));
    };
});
var eqOutlineStyle = new Data_Eq.Eq(function (x) {
    return function (y) {
        return Data_Eq.eq(Data_Maybe.eqMaybe(Color.eqColor))(x.color)(y.color) && Data_Eq.eq(Data_Maybe.eqMaybe(Data_Eq.eqNumber))(x.lineWidth)(y.lineWidth);
    };
});
var eqFillStyle = new Data_Eq.Eq(function (x) {
    return function (y) {
        return Data_Eq.eq(Data_Maybe.eqMaybe(Color.eqColor))(x.color)(y.color);
    };
});
var eqDrawing = new Data_Eq.Eq(function (x) {
    return function (y) {
        if (x instanceof Fill && y instanceof Fill) {
            return Data_Eq.eq(eqShape)(x.value0)(y.value0) && Data_Eq.eq(eqFillStyle)(x.value1)(y.value1);
        };
        if (x instanceof Outline && y instanceof Outline) {
            return Data_Eq.eq(eqShape)(x.value0)(y.value0) && Data_Eq.eq(eqOutlineStyle)(x.value1)(y.value1);
        };
        if (x instanceof Text && y instanceof Text) {
            return Data_Eq.eq(Graphics_Drawing_Font.eqFont)(x.value0)(y.value0) && x.value1 === y.value1 && x.value2 === y.value2 && Data_Eq.eq(eqFillStyle)(x.value3)(y.value3) && x.value4 === y.value4;
        };
        if (x instanceof Many && y instanceof Many) {
            return Data_Eq.eq(Data_List_Types.eqList(eqDrawing))(x.value0)(y.value0);
        };
        if (x instanceof Scale && y instanceof Scale) {
            return x.value0.scaleX === y.value0.scaleX && x.value0.scaleY === y.value0.scaleY && Data_Eq.eq(eqDrawing)(x.value1)(y.value1);
        };
        if (x instanceof Translate && y instanceof Translate) {
            return x.value0.translateX === y.value0.translateX && x.value0.translateY === y.value0.translateY && Data_Eq.eq(eqDrawing)(x.value1)(y.value1);
        };
        if (x instanceof Rotate && y instanceof Rotate) {
            return x.value0 === y.value0 && Data_Eq.eq(eqDrawing)(x.value1)(y.value1);
        };
        if (x instanceof Clipped && y instanceof Clipped) {
            return Data_Eq.eq(eqShape)(x.value0)(y.value0) && Data_Eq.eq(eqDrawing)(x.value1)(y.value1);
        };
        if (x instanceof WithShadow && y instanceof WithShadow) {
            return Data_Eq.eq(eqShadow)(x.value0)(y.value0) && Data_Eq.eq(eqDrawing)(x.value1)(y.value1);
        };
        return false;
    };
});
var closed = function (dictFoldable) {
    return function ($204) {
        return Path.create(true)(Data_List.fromFoldable(dictFoldable)($204));
    };
};
var clipped = Clipped.create;
var arc = function (x) {
    return function (y) {
        return function (start) {
            return function (end) {
                return function (r) {
                    return new Arc({
                        x: x, 
                        y: y, 
                        start: start, 
                        end: end, 
                        r: r
                    });
                };
            };
        };
    };
};
var circle = function (x) {
    return function (y) {
        return arc(x)(y)(0.0)($$Math.pi * 2.0);
    };
};
module.exports = {
    arc: arc, 
    circle: circle, 
    clipped: clipped, 
    closed: closed, 
    everywhere: everywhere, 
    fillColor: fillColor, 
    filled: filled, 
    lineWidth: lineWidth, 
    outlineColor: outlineColor, 
    outlined: outlined, 
    path: path, 
    rectangle: rectangle, 
    render: render, 
    rotate: rotate, 
    scale: scale, 
    shadow: shadow, 
    shadowBlur: shadowBlur, 
    shadowColor: shadowColor, 
    shadowOffset: shadowOffset, 
    text: text, 
    translate: translate, 
    semigroupShape: semigroupShape, 
    monoidShape: monoidShape, 
    eqShape: eqShape, 
    semigroupFillStyle: semigroupFillStyle, 
    monoidFillStyle: monoidFillStyle, 
    eqFillStyle: eqFillStyle, 
    semigroupOutlineStyle: semigroupOutlineStyle, 
    monoidOutlineStyle: monoidOutlineStyle, 
    eqOutlineStyle: eqOutlineStyle, 
    eqShadow: eqShadow, 
    semigroupShadow: semigroupShadow, 
    monoidShadow: monoidShadow, 
    semigroupDrawing: semigroupDrawing, 
    monoidDrawing: monoidDrawing, 
    eqDrawing: eqDrawing
};
