// Generated by purs version 0.11.6
"use strict";
var Data_EuclideanRing = require("../Data.EuclideanRing");
var Data_Ring = require("../Data.Ring");
var Data_Semiring = require("../Data.Semiring");
var Graphics_Drawing = require("../Graphics.Drawing");
var Graphics_Isometric_Types = require("../Graphics.Isometric.Types");
var $$Math = require("../Math");
var Prelude = require("../Prelude");
var vector = function (v) {
    return function (v1) {
        return {
            x: v1.x - v.x, 
            y: v1.y - v.y, 
            z: v1.z - v.z
        };
    };
};
var translateZ = function (dz) {
    return function (v) {
        return {
            x: v.x, 
            y: v.y, 
            z: v.z + dz
        };
    };
};
var translateY = function (dy) {
    return function (v) {
        return {
            x: v.x, 
            y: v.y + dy, 
            z: v.z
        };
    };
};
var translateX = function (dx) {
    return function (v) {
        return {
            x: v.x + dx, 
            y: v.y, 
            z: v.z
        };
    };
};
var translate = function (v) {
    return function (v1) {
        return {
            x: v.x + v1.x, 
            y: v.y + v1.y, 
            z: v.z + v1.z
        };
    };
};
var scale = function (f) {
    return function (v) {
        return {
            x: f * v.x, 
            y: f * v.y, 
            z: f * v.z
        };
    };
};
var rotateZ = function (phi) {
    return function (v) {
        return {
            x: $$Math.cos(phi) * v.x - $$Math.sin(phi) * v.y, 
            y: $$Math.sin(phi) * v.x + $$Math.cos(phi) * v.y, 
            z: v.z
        };
    };
};
var rotateY = function (phi) {
    return function (v) {
        return {
            x: $$Math.cos(phi) * v.x + $$Math.sin(phi) * v.z, 
            y: v.y, 
            z: -$$Math.sin(phi) * v.x + $$Math.cos(phi) * v.z
        };
    };
};
var rotateX = function (phi) {
    return function (v) {
        return {
            x: v.x, 
            y: $$Math.cos(phi) * v.y - $$Math.sin(phi) * v.z, 
            z: $$Math.sin(phi) * v.y + $$Math.cos(phi) * v.z
        };
    };
};
var point = function (x) {
    return function (y) {
        return function (z) {
            return {
                x: x, 
                y: y, 
                z: z
            };
        };
    };
};
var origin = {
    x: 0.0, 
    y: 0.0, 
    z: 0.0
};
var from2D = function (v) {
    return {
        x: v.x, 
        y: v.y, 
        z: 0.0
    };
};
var dot = function (v) {
    return function (v1) {
        return v.x * v1.x + v.y * v1.y + v.z * v1.z;
    };
};
var norm = function (p) {
    return $$Math.sqrt(dot(p)(p));
};
var normalize = function (p) {
    var n = norm(p);
    return {
        x: p.x / n, 
        y: p.y / n, 
        z: p.z / n
    };
};
var depth = function (p) {
    return p.x + p.y + p.z;
};
var cross = function (v) {
    return function (v1) {
        return {
            x: v.y * v1.z - v.z * v1.y, 
            y: v.z * v1.x - v.x * v1.z, 
            z: v.x * v1.y - v.y * v1.x
        };
    };
};
module.exports = {
    cross: cross, 
    depth: depth, 
    dot: dot, 
    from2D: from2D, 
    norm: norm, 
    normalize: normalize, 
    origin: origin, 
    point: point, 
    rotateX: rotateX, 
    rotateY: rotateY, 
    rotateZ: rotateZ, 
    scale: scale, 
    translate: translate, 
    translateX: translateX, 
    translateY: translateY, 
    translateZ: translateZ, 
    vector: vector
};
